import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:mubicloud/core/constants/UIConstants.dart';

import 'package:mubicloud/core/utils/global_audio_handler.dart';
import '../../core/app_export.dart';

/// Helper class for managing themes and colors.
class ThemeHelper {
  // The current app theme
  var _appTheme = PrefUtils().getThemeData();

// A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors(),
    'darkPrimary': PrimaryColors(),
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme,
    'darkPrimary': ColorSchemes.darkPrimaryColorScheme,
  };

  /// Changes the app theme to [_newTheme].
  void changeTheme() {
    // _newTheme = _newTheme=="primary"?"darkPrimary":"primary";
    _appTheme =
        PrefUtils().getThemeData() == "primary" ? "darkPrimary" : "primary";

    PrefUtils().setThemeData(_appTheme);
    Get.forceAppUpdate();
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      colorScheme: colorScheme,
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: appTheme.deepPurpleA200,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(
              16.r,
            ),
          ),
        ),
      ),
      outlinedButtonTheme: OutlinedButtonThemeData(
        style: OutlinedButton.styleFrom(
          backgroundColor: Color(0xFFFFFFFF),
          shape: RoundedRectangleBorder(
            side: BorderSide(
              color: appTheme.deepPurpleA200,
              width: 1,
            ),
            borderRadius: BorderRadius.circular(
              16.r,
            ),
          ),
        ),
      ),
      textTheme: TextTheme(
        bodyMedium: TextStyle(
          color: appTheme.gray600,
          fontSize: getFontSize(
            14,
          ),
          fontFamily: 'SF Pro Display',
          fontWeight: FontWeight.w400,
        ),
        headlineMedium: TextStyle(
          color: UIConstants().textColor,
          fontSize: getFontSize(
            28,
          ),
          fontFamily: 'SF Pro Display',
          fontWeight: FontWeight.w700,
        ),
        titleMedium: TextStyle(
          color: UIConstants().textColor,
          fontSize: getFontSize(
            18,
          ),
          fontFamily: 'SF Pro Display',
          fontWeight: FontWeight.w700,
        ),
        titleLarge: TextStyle(
          color: UIConstants().textColor,
          fontSize: getFontSize(
            22,
          ),
          fontFamily: 'SF Pro Display',
          fontWeight: FontWeight.w700,
        ),
        displaySmall: TextStyle(
          color: UIConstants().textColor,
          fontSize: getFontSize(
            34,
          ),
          fontFamily: 'SF Pro Display',
          fontWeight: FontWeight.w700,
        ),
      ),
      visualDensity: VisualDensity.standard,
      chipTheme: ChipThemeData(
        backgroundColor: UIConstants().bgColor,
        selectedColor: appTheme.primaryColor,
        secondarySelectedColor: Colors.amber,
        labelStyle: TextStyle(color: UIConstants().textLightMode),
        secondaryLabelStyle: TextStyle(color: Color(0xFF425c80)),
        brightness: PrefUtils().getThemeData() == "primary"
            ? Brightness.light
            : Brightness.dark,
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    onPrimary: Color(0xFF40455B),
    shadow: Color(0xFF40455B),
    onPrimaryContainer: Color(0xFFFFFFFF),
    onTertiary: Color(0xFFFFFFFF),
    scrim: Color(0xFF40455B),
    primaryContainer: Color(0xFF40455B),
    tertiaryContainer: Color(0xFFFEFB00),
    secondaryContainer: Color(0xFFFEFB00),
    error: Color(0xFF40455B),
    onErrorContainer: Color(0xFF40455B),
    outline: Color(0xFF40455B),
    onSurfaceVariant: Color(0xFF40455B),
    onBackground: Color(0xFFFFFFFF),
    outlineVariant: Color(0xFF40455B),
    errorContainer: Color(0xFFFEFB00),
    onSurface: Color(0xFFFFFFFF),
    onError: Color(0xFFFFFFFF),
    surface: Color(0xFF40455B),
    onInverseSurface: Color(0xFFFFFFFF),
    onSecondaryContainer: Color(0xFF40455B),
    tertiary: Color(0xFF40455B),
    surfaceTint: Color(0xFF40455B),
    onTertiaryContainer: Color(0xFF40455B),
    surfaceVariant: Color(0xFFFEFB00),
    inversePrimary: Color(0xFF40455B),
    secondary: Color(0xFF40455B),
    inverseSurface: Color(0xFF40455B),
    background: Color(0xFF40455B),
    onSecondary: Color(0xFFFFFFFF),
    primary: Color(0xFFFFFFFF),
  );

  static final darkPrimaryColorScheme = ColorScheme.dark(
    onPrimary: Color(0xFF40455B),
    shadow: Color(0xFF40455B),
    onPrimaryContainer: Color(0xFFFFFFFF),
    onTertiary: Color(0xFFFFFFFF),
    scrim: Color(0xFF40455B),
    primaryContainer: Color(0xFF40455B),
    tertiaryContainer: Color(0xFFFEFB00),
    secondaryContainer: Color(0xFFFEFB00),
    error: Color(0xFF40455B),
    onErrorContainer: Color(0xFF40455B),
    outline: Color(0xFF40455B),
    onSurfaceVariant: Color(0xFF40455B),
    onBackground: Color(0xFFFFFFFF),
    outlineVariant: Color(0xFF40455B),
    errorContainer: Color(0xFFFEFB00),
    onSurface: Color(0xFFFFFFFF),
    onError: Color(0xFFFFFFFF),
    surface: Color(0xFF40455B),
    onInverseSurface: Color(0xFFFFFFFF),
    onSecondaryContainer: Color(0xFF40455B),
    tertiary: Color(0xFF40455B),
    surfaceTint: Color(0xFF40455B),
    onTertiaryContainer: Color(0xFF40455B),
    surfaceVariant: Color(0xFFFEFB00),
    inversePrimary: Color(0xFF40455B),
    secondary: Color(0xFF40455B),
    inverseSurface: Color(0xFF40455B),
    background: Color(0xFF40455B),
    onSecondary: Color(0xFFFFFFFF),
    primary: Color(0xFFFFFFFF),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  Color get primaryVariant => PrefUtils().getThemeData() == "primary"
      ? Color(0xFF40455B)
      : Color(0xFF40455B);
  Color get selectedTabColor => PrefUtils().getThemeData() == "primary"
      ? Color(0xFF5ECDB5)
      : Color(0xFF5ECDB5);
  Color get unselectedTabColor => PrefUtils().getThemeData() == "primary"
      ? Color(0xFF696969)
      : Color(0xFF696969);
  Color get secondaryVariant => Color(0xFFFEFB00);
  Color get gray50 => Color(0xFFFDFCFA);
  Color get blueGray300 => Color(0xFFA3A3B5);
  Color get gray600 => Color(0xFF808080);
  Color get gray100 => PrefUtils().getThemeData() == "primary"
      ? Color(0xFFFFFFFF)
      : Color(0xFF1f3149);
  Color get gray150 => PrefUtils().getThemeData() == "primary"
      ? Color.fromARGB(255, 236, 236, 236)
      : Color.fromARGB(255, 36, 54, 78);
  Color get lightBlue400 => Color(0xFF2CA9EB);
  Color get amber600 => Color(0xFFDBB903);
  Color get blue600 => Color(0xFF1777F1);
  Color get blueGray100 => PrefUtils().getThemeData() == "primary"
      ? Color(0xFFCFCFCF)
      : Color(0xFFCFCFCF).withOpacity(0.20);
  Color get gray90090 => Color(0x90151516);
  Color get lightGreenA700 => Color(0xFF31D100);
  Color get gray700 => PrefUtils().getThemeData() == "primary"
      ? Color(0xFF696969)
      : Color(0xFF696969);
  Color get red400 => Color(0xFFF05858);
  Color get indigo5087 => Color(0x87DBE4F2);
  Color get red300 => Color(0xFFAE7174);
  Color get purple300 => Color(0xFFB075D9);
  Color get gray40087 => Color(0x87C4C4C4);
  Color get blueGray400 => Color(0xFF888888);
  Color get greenA700 => Color(0xFF21D266);
  Color get containerColor => PrefUtils().getThemeData() == "primary"
      ? Color(0xFFF6F6F6)
      : Color(0xFF292929);

  Color get deepPurpleA200 => PrefUtils().getThemeData() == "primary"
      ? Color(0xFF00e1c3)
      : Color(0xFF01b79f);
  // Color get deepPurpleA200Opacity02 => Color(0xFF8873FE).withOpacity(0.30);
  Color get deepPurpleA200Opacity02 => Color(0xFF425C80);
  Color get black900 => PrefUtils().getThemeData() == "primary"
      ? Color(0xFF000000)
      : Color(0xFFFFFFFF);
  Color get white700 => PrefUtils().getThemeData() == "primary"
      ? Color(0xFFFFFFFF)
      : Color(0xFF292929);
  Color get bgColor => PrefUtils().getThemeData() == "primary"
      ? Color(0xFFf6f7fc)
      : Color(0xFF0b1b2f);
  Color get bgLoginColor => PrefUtils().getThemeData() == "primary"
      ? Color(0xFF584fe0)
      : Color(0xFF0b1b2f);
  Color get footerColor => PrefUtils().getThemeData() == "primary"
      ? Color(0xFFffffff)
      : Color(0xFF0e2036);
  Color get miniPlayerColor => PrefUtils().getThemeData() == "primary"
      ? Color(0xFFf6f7fc)
      : Color(0xFF0b1b2f);
  Color get fgColor => PrefUtils().getThemeData() == "primary"
      ? Color(0xFF151516)
      : Color(0xFFFFFFFF);
  Color get whiteColor => Color(0xFFFFFFFF);
  Color get color => PrefUtils().getThemeData() == "primary"
      ? Color(0xFFFFFFFF)
      : Color(0xFF151516);
  Color get gray300 => Color(0xFFC5C5C5);
  Color get primaryColor => PrefUtils().getThemeData() == "primary"
      ? Color(0xFF00e1c3)
      : Color(0xFF01b79f);
  Color get errorColor => Color(0xFFF15858);
  Color get borderColor => Color(0xFFCFCFCF);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
closeApp() {
  Future.delayed(const Duration(milliseconds: 1000), () {
    GlobalAudioHandler.instance.stop();
    SystemNavigator.pop();
  });
}

setSafeAreaColor() {
  SystemChrome.setSystemUIOverlayStyle(
    SystemUiOverlayStyle(
      statusBarColor: UIConstants().bgColor,
      statusBarIconBrightness: PrefUtils().getThemeData() == "primary"
          ? Brightness.dark
          : Brightness.light,
    ),
  );
}
